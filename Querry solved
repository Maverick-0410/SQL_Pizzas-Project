-- Creating a database and two tables to import larger CSV files.

CREATE DATABASE pizzahut;
use pizzahut;
CREATE TABLE orders (
order_id INT NOT NULL,
order_date DATE NOT NULL,
order_time TIME NOT NULL,
PRIMARY KEY (Order_id)
);

CREATE TABLE order_details (
order_details_id INT NOT NULL,
order_id INT NOT NULL,
pizza_id TEXT NOT NULL,
quantity INT NOT NULL,
PRIMARY KEY (order_details_id)
);
 
-- 1. Retrieve the total number of orders placed.

Select count(order_id) as total_orders from orders;

 
 
-- 2. Calculate the total revenue generated from pizza sales.

select
round(sum(Order_details.quantity * pizzas.price),2) as total_sales
from order_details join pizzas
on order_details.pizza_id = Pizzas.pizza_id

 
 
-- 3. Identify the highest-priced pizza.

Select pizza_types.name, pizzas.price
FROM pizza_types JOIN pizzas
ON pizza_types.Pizza_type_id=pizzas.pizza_type_id
WHERE pizzas.price = (select MAX(Price) from pizzas);

 /* or another way to get same result */
Select pizza_types.name, pizzas.price
FROM pizza_types JOIN pizzas
ON pizza_types.Pizza_type_id=pizzas.pizza_type_id
ORDER BY pizzas.price desc limit 1;

 
 
-- 4. Identify the most common pizza size ordered.

select pizzas.size, sum(order_details.quantity) as total_qty
FROM pizzas JOIN order_details
on pizzas.pizza_id = order_details.pizza_id
group by pizzas.size
ORDER BY total_qty desc limit 1;

 
 
-- 5. List the top 5 most ordered pizza types along with their quantities.
-- since pizatypes and order details does not directly have any connecting column, we have to use a third table to join them. 

select pizza_types.name, SUM(order_details.quantity) as total_qty
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY total_qty DESC LIMIT 5;

 
 
-- J6. oin the necessary tables to find the total quantity of each pizza category ordered.

SELECT pizza_types.category, sum(order_details.quantity) as total_quantity
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id=pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id=pizzas.pizza_id

GROUP BY pizza_types.category
ORDER BY total_quantity DESC;


 
 
-- 7. Join relevant tables to find the category-wise distribution of pizzas sold.

select pizza_types.category, sum(order_details.quantity) as Quantity
FROM pizza_types JOIN pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY quantity DESC;


 
-- 8. Group the orders by date and calculate the average number of pizzas ordered per day.

Select orders.order_date AS Date, avg(order_details.quantity) AS Quantity
FROM orders JOIN order_details
ON orders.order_id = order_details.order_id
GROUP BY Date
ORDER BY Date Asc;


 
-- 9. Determine the top 3 most ordered pizza types based on revenue.

select pizza_types.name, sum(pizzas.price*order_details.quantity) AS Revenue
FROM pizza_types JOIN Pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY Revenue DESC LIMIT 3;

 
 
-- 10. Calculate the percentage contribution of each pizza category to total revenue.

select pizza_types.category, 
	concat(round((sum(pizzas.price*order_details.quantity)/ 
		(SELECT sum(pizzas.price*order_details.quantity)
		FROM pizzas JOIN order_details
		ON pizzas.pizza_id = order_details.pizza_id)) 
	* 100 , 2) , "%") AS Contribution
FROM pizza_types JOIN Pizzas
ON pizza_types.pizza_type_id = pizzas.pizza_type_id
JOIN order_details
ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.category
ORDER BY Contribution DESC;

 
 
-- 11. Analyze the cumulative revenue generated over time.

SELECT order_date, round (sum(revenue) over (order by order_date),2) as cumulative_revenue
FROM 
(SELECT orders.order_date, sum(order_details.quantity*pizzas.price) as Revenue
FROM orders JOIN order_details
ON orders.order_id = order_details.order_id
JOIN pizzas
ON pizzas.pizza_id = order_details.pizza_id
GROUP BY orders.order_date) AS Sales;


 
 
-- 12. Determine the top 3 most ordered pizza types based on revenue for each pizza category.

SELECT  category, name, revenue FROM
    (SELECT category, name, revenue,
	rank() over (partition by category order by revenue desc) as rnk FROM
			(SELECT pizza_types.category, pizza_types.name, sum(order_details.quantity * pizzas.price) as Revenue
			FROM pizza_types JOIN pizzas
			ON pizza_types.pizza_type_id = pizzas.pizza_type_id
			JOIN order_details
			ON order_details.pizza_id = pizzas.pizza_id
			GROUP BY pizza_types.category, pizza_types.name ) as A ) as B 
			-- this section gives revenue grouped on the basis of category and types 
	-- this picks out the 3 required cols and adds another column rank which ranks based on revenue and is ordered desc. but this gives all and not top 3
where rnk <=3;


